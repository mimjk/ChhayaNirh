@model List<ChhayaNirh.Models.Chat>
@{
    ViewBag.Title = "Chat with " + ViewBag.ReceiverName;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var currentUserId = Convert.ToInt32(Session["UserId"]);
    var receiverId = ViewBag.ReceiverId;
}

<style>
    .chat-container {
        max-width: 800px;
        margin: 20px auto;
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        height: 80vh;
        display: flex;
        flex-direction: column;
    }

    .chat-header {
        background-color: #5C0002;
        color: white;
        padding: 15px 20px;
        display: flex;
        align-items: center;
        gap: 15px;
        flex-shrink: 0;
    }

    .back-btn {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        color: white;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        font-size: 18px;
        transition: background-color 0.3s ease;
    }

        .back-btn:hover {
            background: rgba(255, 255, 255, 0.3);
        }

    .chat-title {
        font-size: 20px;
        font-weight: 600;
        margin: 0;
    }

    .chat-box {
        flex-grow: 1;
        overflow-y: auto;
        padding: 20px;
        display: flex;
        flex-direction: column;
        gap: 15px;
        background-color: #FFFFF0;
    }

    .chat-message {
        display: flex;
        margin-bottom: 10px;
        cursor: pointer;
    }

        .chat-message.sent {
            justify-content: flex-end;
        }

        .chat-message.received {
            justify-content: flex-start;
        }

    .message-bubble {
        max-width: 70%;
        padding: 12px 16px;
        border-radius: 20px;
        word-wrap: break-word;
        position: relative;
    }

        .message-bubble.sent {
            background-color: #5C0002;
            color: white;
            border-bottom-right-radius: 6px;
        }

        .message-bubble.received {
            background-color: #e4e6ea;
            color: #333;
            border-bottom-left-radius: 6px;
        }

        /* 🔹 Special styling for Admin messages */
        .message-bubble.admin {
            background-color: #1976D2;
            color: white;
            border-bottom-left-radius: 6px;
            border-left: 4px solid #0D47A1;
        }

    .message-content {
        display: flex;
        align-items: flex-end;
        gap: 8px;
    }

    .message-text {
        margin: 0;
        font-size: 14px;
        line-height: 1.4;
        flex-grow: 1;
    }

    .message-status {
        font-size: 12px;
        opacity: 0.7;
        display: flex;
        align-items: center;
        gap: 2px;
        margin-top: 4px;
        justify-content: flex-end;
    }

    .message-time {
        font-size: 11px;
        opacity: 0.7;
        margin-top: 4px;
        display: block;
    }

    .status-indicator {
        font-size: 12px;
        margin-left: 4px;
        display: inline-flex;
        align-items: center;
    }

    .status-sent {
        color: rgba(255, 255, 255, 0.7);
    }

    .status-delivered {
        color: rgba(255, 255, 255, 0.7);
    }

    .status-read {
        color: #4CAF50; /* Green for read status */
    }

    .status-text {
        font-size: 10px;
        opacity: 0.6;
        margin-top: 2px;
        display: none; /* Hidden by default, shown on click */
    }

    .message-input-container {
        padding: 15px 20px;
        background-color: white;
        border-top: 1px solid #e4e6ea;
        flex-shrink: 0;
    }

    .message-input-form {
        display: flex;
        align-items: flex-end;
        gap: 10px;
    }

    .message-input {
        flex-grow: 1;
        resize: none;
        border: 2px solid #e4e6ea;
        border-radius: 25px;
        padding: 12px 16px;
        font-size: 14px;
        line-height: 1.4;
        min-height: 24px;
        max-height: 100px;
        outline: none;
        transition: border-color 0.3s ease;
        background-color: #f8f9fa;
    }

        .message-input:focus {
            border-color: #5C0002;
            background-color: white;
        }

    .send-btn {
        background-color: #5C0002;
        color: white;
        border: none;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        font-size: 18px;
        transition: background-color 0.3s ease;
        flex-shrink: 0;
    }

        .send-btn:hover:not(:disabled) {
            background-color: #7a1a1c;
        }

        .send-btn:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

    .no-messages {
        text-align: center;
        color: #65676b;
        padding: 40px 20px;
    }

        .no-messages i {
            font-size: 48px;
            margin-bottom: 15px;
            color: #ddd;
        }

    .typing-indicator {
        display: none;
        padding: 8px 16px;
        background-color: #e4e6ea;
        border-radius: 20px;
        color: #65676b;
        font-style: italic;
        font-size: 13px;
        align-self: flex-start;
        max-width: 100px;
    }

    .chat-box {
        scroll-behavior: smooth;
    }

    /* Animation for new messages */
    .message-animate {
        animation: slideInUp 0.3s ease-out;
    }

    /* 🔹 Admin restriction message */
    .admin-restriction {
        color: red;
        font-weight: bold;
        text-align: center;
        padding: 15px;
        background-color: #ffebee;
        border-radius: 8px;
        border: 1px solid #ffcdd2;
    }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

<div class="chat-container">
    <div class="chat-header">
        <button class="back-btn" onclick="goBack()">
            <i class="fas fa-arrow-left"></i>
        </button>
        <h3 class="chat-title">@ViewBag.ReceiverName</h3>
    </div>

    <div class="chat-box" id="chatBox">
        @if (Model != null && Model.Any())
        {
            foreach (var msg in Model)
            {
                var isAdmin = (msg.SenderId == 0);
                var messageClass = msg.SenderId == currentUserId ? "sent" : "received";
                var bubbleClass = isAdmin ? "admin" : messageClass;

                <div class="chat-message @messageClass"
                     data-message-id="@msg.Id"
                     onclick="toggleStatusText(@msg.Id)">
                    <div class="message-bubble @bubbleClass">
                        <div class="message-content">
                            <p class="message-text">@msg.MessageText</p>
                            @if (msg.SenderId == currentUserId)
                            {
                                <span class="status-indicator status-@msg.MessageStatus" id="status-@msg.Id">
                                    @if (msg.MessageStatus == "sent")
                                    {
                                        <i class="fas fa-check"></i>
                                    }
                                    else if (msg.MessageStatus == "delivered")
                                    {
                                        <i class="fas fa-check-double"></i>
                                    }
                                    else if (msg.MessageStatus == "read")
                                    {
                                        <i class="fas fa-check-double"></i>
                                    }
                                </span>
                            }
                        </div>
                        <span class="message-time">@msg.SentAt.ToString("HH:mm")</span>
                        <div class="status-text" id="statusText-@msg.Id">
                            @if (msg.SenderId == currentUserId)
                            {
                                if (msg.MessageStatus == "sent")
                                {
                                    <text>Sent</text>
                                }
                                else if (msg.MessageStatus == "delivered")
                                {
                                    <text>Delivered</text>
                                }
                                else if (msg.MessageStatus == "read")
                                {
                                    <text>Seen</text>
                                }
                            }
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="no-messages">
                <i class="fas fa-comment"></i>
                <p>No messages yet. Start the conversation!</p>
            </div>
        }

        <div class="typing-indicator" id="typingIndicator">
            Someone is typing...
        </div>
    </div>

    <div class="message-input-container">
        @* 🔹 Check if user is trying to message Admin *@
        @if (ViewBag.ReceiverId == 3)
        {
            <div class="admin-restriction">
                <i class="fas fa-exclamation-triangle"></i>
                You cannot reply to Admin messages.
            </div>
        }
        else
        {
            <div class="message-input-form" id="messageForm">
                <textarea id="messageInput"
                          class="message-input"
                          placeholder="Type a message..."
                          required
                          rows="1"></textarea>
                <button type="button" class="send-btn" id="sendBtn" disabled onclick="sendMessage()">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        }
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="~/Scripts/jquery.signalR-2.4.3.min.js"></script>
<script src="~/signalr/hubs"></script>

<script>
    var currentUserId = @currentUserId;
    var receiverId = @receiverId;
    var connection;

    $(document).ready(function() {
        // Only initialize SignalR if not chatting with Admin
        if (receiverId !== 0) {
            initializeSignalR();
        }

        // Setup event handlers
        setupEventHandlers();

        // Scroll to bottom and focus on input
        scrollToBottom();
        if (receiverId !== 0) {
            $('#messageInput').focus();
        }
        toggleSendButton();
    });

    function initializeSignalR() {
        // Initialize SignalR connection (ASP.NET SignalR syntax)
        connection = $.connection.chatHub;

        // Define client methods
        connection.client.messageReceived = function (message) {
            if (message.SenderId !== currentUserId) {
                addMessageToChat(message, false);
                // Mark as read immediately when viewing
                connection.server.markAsRead(currentUserId, message.SenderId);
            } else {
                // Update status of sent message
                updateMessageStatus(message.Id, message.Status);
            }
            scrollToBottom();
        };

        // Handle message status updates
        connection.client.messagesDelivered = function (data) {
            if (data.SenderId === currentUserId) {
                data.MessageIds.forEach(function(messageId) {
                    updateMessageStatus(messageId, "delivered");
                });
            }
        };

        connection.client.messagesRead = function (data) {
            if (data.SenderId === currentUserId) {
                data.MessageIds.forEach(function(messageId) {
                    updateMessageStatus(messageId, "read");
                });
            }
        };

        // Handle individual message status updates
        connection.client.messageStatusUpdated = function (data) {
            if (data.SenderId === currentUserId) {
                updateMessageStatus(data.MessageId, data.Status);
            }
        };

        // Start connection
        $.connection.hub.start().then(function () {
            console.log("Connected to ChatHub");
            connection.server.joinChat(currentUserId, receiverId);
        }).fail(function (err) {
            console.error("SignalR connection failed:", err);
        });
    }

    function setupEventHandlers() {
        // Handle Enter key and input changes (only if not Admin chat)
        if (receiverId !== 0) {
            $('#messageInput').on('keydown', function(event) {
                handleKeyDown(event);
            });

            $('#messageInput').on('input', function() {
                adjustTextareaHeight(this);
                toggleSendButton();
            });
        }
    }

    function addMessageToChat(message, isSent) {
        // Remove any temporary message if this is a real message from server
        if (!isSent && message.Id) {
            $(`.chat-message[data-message-id^="temp-"]`).remove();
        }

        var messageClass = isSent ? 'sent' : 'received';
        var statusHtml = '';

        if (isSent) {
            var statusIcon = message.Status === 'sent' ? 'fa-check' :
                           message.Status === 'delivered' ? 'fa-check-double' : 'fa-check-double';
            var statusClass = 'status-' + message.Status;

            statusHtml = `<span class="status-indicator ${statusClass}" id="status-${message.Id}">
                            <i class="fas ${statusIcon}"></i>
                          </span>`;
        }

        var messageHtml = `
            <div class="chat-message ${messageClass} message-animate" data-message-id="${message.Id}" onclick="toggleStatusText(${message.Id})">
                <div class="message-bubble ${messageClass}">
                    <div class="message-content">
                        <p class="message-text">${escapeHtml(message.MessageText)}</p>
                        ${statusHtml}
                    </div>
                    <span class="message-time">${new Date(message.SentAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</span>
                    <div class="status-text" id="statusText-${message.Id}">
                        ${isSent ? getStatusText(message.Status) : ''}
                    </div>
                </div>
            </div>
        `;

        $('.no-messages').hide();
        $('#chatBox').append(messageHtml);
        scrollToBottom();
    }

    function updateMessageStatus(messageId, status) {
        var statusElement = $('#status-' + messageId);
        var statusTextElement = $('#statusText-' + messageId);

        if (statusElement.length) {
            // Remove existing classes
            statusElement.removeClass('status-sent status-delivered status-read');
            statusElement.addClass('status-' + status);

            // Update icon
            var icon = statusElement.find('i');
            if (status === 'sent') {
                icon.removeClass().addClass('fas fa-check');
            } else if (status === 'delivered' || status === 'read') {
                icon.removeClass().addClass('fas fa-check-double');
            }

            // Update status text
            statusTextElement.text(getStatusText(status));
        }
    }

    function getStatusText(status) {
        switch(status) {
            case 'sent': return 'Sent';
            case 'delivered': return 'Delivered';
            case 'read': return 'Seen';
            default: return '';
        }
    }

    function sendMessage() {
        // Don't send if chatting with Admin
        if (receiverId === 3) { // Admin ID
        alert("You cannot send messages to Admin.");
        return;
    }


        var messageText = $('#messageInput').val().trim();
        if (messageText === '') return;

        // Create temporary message object
        var tempMessage = {
            Id: "temp-" + Date.now(), // Temporary ID with prefix
            SenderId: currentUserId,
            ReceiverId: receiverId,
            MessageText: messageText,
            SentAt: new Date(),
            Status: 'sent'
        };

        // Add to chat immediately
        addMessageToChat(tempMessage, true);

        // Clear input
        $('#messageInput').val('');
        adjustTextareaHeight($('#messageInput')[0]);
        toggleSendButton();
        scrollToBottom();

        // Send via SignalR (correct ASP.NET SignalR syntax)
        connection.server.sendMessage(currentUserId, receiverId, messageText)
            .fail(function (err) {
                console.error("Error sending message:", err);
                // Remove the temporary message on error
                $(`[data-message-id="${tempMessage.Id}"]`).remove();
                alert("Failed to send message. Please try again.");
            });
    }

    function scrollToBottom() {
        const chatBox = document.getElementById('chatBox');
        if (chatBox) {
            chatBox.scrollTop = chatBox.scrollHeight;
        }
    }

    function adjustTextareaHeight(textarea) {
        if (textarea) {
            textarea.style.height = 'auto';
            textarea.style.height = Math.min(textarea.scrollHeight, 100) + 'px';
        }
    }

    function toggleSendButton() {
        const input = document.getElementById('messageInput');
        const sendBtn = document.getElementById('sendBtn');
        if (input && sendBtn) {
            sendBtn.disabled = input.value.trim() === '' || receiverId === 0;
        }
    }

    function escapeHtml(unsafe) {
        return unsafe
             .replace(/&/g, "&amp;")
             .replace(/</g, "&lt;")
             .replace(/>/g, "&gt;")
             .replace(/"/g, "&quot;")
             .replace(/'/g, "&#039;");
    }

    function handleKeyDown(event) {
        if (event.key === 'Enter' && !event.shiftKey) {
            event.preventDefault(); // Prevent default Enter key behavior (new line)
            sendMessage();
        }
    }

    function toggleStatusText(messageId) {
        var statusTextElement = $('#statusText-' + messageId);
        if (statusTextElement.length) {
            statusTextElement.toggle(); // Toggle visibility
        }
    }

    function goBack() {
        window.history.back();
    }
</script>