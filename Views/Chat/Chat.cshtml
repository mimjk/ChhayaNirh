@model List<ChhayaNirh.ViewModels.ChatListViewModel>
@{
    ViewBag.Title = "Your Chats";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .chat-list-container {
        max-width: 800px;
        margin: 20px auto;
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .chat-header {
        background-color: #5C0002;
        color: white;
        padding: 20px;
        text-align: center;
    }

        .chat-header h3 {
            margin: 0;
            font-weight: 600;
        }

    .chat-preview {
        padding: 20px;
        border-bottom: 1px solid #e4e6ea;
        transition: background-color 0.3s ease;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: between;
        position: relative;
    }

        .chat-preview:hover {
            background-color: #f8f9fa;
        }

        .chat-preview:last-child {
            border-bottom: none;
        }

        .chat-preview.unread {
            background-color: #f8f9fa;
            border-left: 4px solid #5C0002;
        }

    .chat-avatar {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        margin-right: 15px;
        flex-shrink: 0;
        overflow: hidden;
        border: 2px solid #5C0002;
        position: relative;
    }

        .chat-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 50%;
        }

    .chat-info {
        flex-grow: 1;
        min-width: 0;
    }

    .chat-name {
        font-weight: 600;
        font-size: 18px;
        color: #5C0002;
        margin: 0 0 5px 0;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .chat-last-message {
        color: #65676b;
        font-size: 14px;
        margin: 0 0 5px 0;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

        .chat-last-message.unread {
            font-weight: 600;
            color: #333;
        }

    .chat-time {
        color: #999;
        font-size: 12px;
        margin: 0;
    }

        .chat-time.unread {
            color: #5C0002;
            font-weight: 600;
        }

    .chat-action {
        margin-left: 15px;
        flex-shrink: 0;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .unread-badge {
        background-color: #5C0002;
        color: white;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
        font-weight: 600;
        min-width: 24px;
    }

    .chat-btn {
        background-color: #5C0002;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 6px;
        text-decoration: none;
        font-size: 14px;
        font-weight: 500;
        transition: background-color 0.3s ease;
        display: inline-block;
    }

        .chat-btn:hover {
            background-color: #7a1a1c;
            color: white;
            text-decoration: none;
        }

    .no-chats {
        text-align: center;
        padding: 60px 20px;
        color: #65676b;
    }

        .no-chats i {
            font-size: 48px;
            margin-bottom: 15px;
            color: #ccc;
        }

        .no-chats h4 {
            margin-bottom: 10px;
            color: #5C0002;
        }

        .no-chats p {
            margin: 0;
        }

    .online-indicator {
        position: absolute;
        bottom: 2px;
        right: 2px;
        width: 16px;
        height: 16px;
        background-color: #4CAF50;
        border: 2px solid white;
        border-radius: 50%;
    }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

<div class="chat-list-container" style="background-color: #FFFFF0;">
    <div class="chat-header">
        <h3><i class="fas fa-comments"></i> Your Conversations</h3>
    </div>

    @if (Model != null && Model.Any())
    {
        foreach (var chat in Model)
        {
            <div class="chat-preview @(chat.UnreadCount > 0 ? "unread" : "")" onclick="openChat(@chat.UserId)">
                <div class="chat-avatar">
                    <img src="@Url.Content(chat.ProfilePicturePath)"
                         alt="@chat.UserName's Profile"
                         onerror="this.src='@Url.Content("~/Content/Images/default-profile2.png")'" />
                    <!-- Online indicator can be added here if you track online status -->
                </div>
                <div class="chat-info">
                    <h5 class="chat-name">
                        @chat.UserName
                        @if (chat.UnreadCount > 0)
                        {
                            <span class="unread-badge">@chat.UnreadCount</span>
                        }
                    </h5>
                    <p class="chat-last-message @(chat.UnreadCount > 0 ? "unread" : "")">@chat.LastMessageText</p>
                    <small class="chat-time @(chat.UnreadCount > 0 ? "unread" : "")">@chat.LastMessageTime.ToString("MMM dd, yyyy 'at' HH:mm")</small>
                </div>
                <div class="chat-action">
                    <a href="@Url.Action("Inbox", "Chat", new { userId = chat.UserId })" class="chat-btn">
                        <i class="fas fa-comment"></i> Open Chat
                    </a>
                </div>
            </div>
        }
    }
    else
    {
        <div class="no-chats">
            <i class="fas fa-comment-slash"></i>
            <h4>No conversations yet</h4>
            <p>Start a conversation by contacting someone from their post!</p>
        </div>
    }
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="~/Scripts/jquery.signalR-2.4.3.min.js"></script>
<script src="~/signalr/hubs"></script>

<script>
    var currentUserId = @(Session["UserId"] ?? 0);
    var connection;

// SignalR section

$(document).ready(function() {
    // Initialize SignalR connection for real-time updates
    if (currentUserId > 0) {
        connection = $.connection.chatHub;

        // Define client methods
        connection.client.messageReceived = function (message) {
            updateChatPreview(message);
        };

        connection.client.messagesDelivered = function (data) {
            // Handle delivery notifications if needed
        };

        connection.client.messagesRead = function (data) {
            // Handle read notifications if needed
        };

        // Start connection
        $.connection.hub.start().then(function () {
            console.log("Connected to ChatHub for chat list");
        }).fail(function (err) {
            console.error("SignalR connection failed:", err);
        });
    }

    // Add click effect to chat previews
    $('.chat-preview').click(function() {
        $(this).css('background-color', '#f0f2f5');
        setTimeout(() => {
            $(this).css('background-color', '');
        }, 200);
    });
});

function openChat(userId) {
    window.location.href = '@Url.Action("Inbox", "Chat")' + '?userId=' + userId;
}

function updateChatPreview(message) {
    // Update the last message and unread count for the specific user
    var chatPreview = $(`[onclick="openChat(${message.SenderId})"]`);
    if (chatPreview.length && message.ReceiverId === currentUserId) {
        // Update last message text
        chatPreview.find('.chat-last-message').text(message.MessageText);

        // Update timestamp
        var timeString = new Date(message.SentAt).toLocaleDateString('en-US', {
            month: 'short',
            day: '2-digit',
            year: 'numeric'
        }) + ' at ' + new Date(message.SentAt).toLocaleTimeString('en-US', {
            hour: '2-digit',
            minute: '2-digit'
        });
        chatPreview.find('.chat-time').text(timeString);

        // Add unread styling
        chatPreview.addClass('unread');
        chatPreview.find('.chat-last-message').addClass('unread');
        chatPreview.find('.chat-time').addClass('unread');

        // Update or add unread badge
        var existingBadge = chatPreview.find('.unread-badge');
        if (existingBadge.length) {
            var currentCount = parseInt(existingBadge.text()) || 0;
            existingBadge.text(currentCount + 1);
        } else {
            chatPreview.find('.chat-name').append('<span class="unread-badge">1</span>');
        }

        // Move this chat to the top
        chatPreview.prependTo(chatPreview.parent());

        // Update navbar notification
        updateNavbarNotification();
    }
}

function updateNavbarNotification() {
    // Count total unread messages
    var totalUnread = 0;
    $('.unread-badge').each(function() {
        totalUnread += parseInt($(this).text()) || 0;
    });

    // Update navbar badge
    if (totalUnread > 0) {
        $('#chatNotificationBadge').text(totalUnread).show();
    } else {
        $('#chatNotificationBadge').hide();
    }
}

// Clean up connection when leaving page
window.addEventListener('beforeunload', function() {
    if (connection) {
        connection.stop();
    }
});
</script>